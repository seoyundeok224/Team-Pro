{"ast":null,"code":"var _jsxFileName = \"/Users/thesueji/Desktop/team2/Team-Pro/building-outline-map/src/components/Weather/WeatherBar.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './WeatherBar.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY_1 = '84a4cfe7ca79fc9b0120217a7d5a2028'; // OpenWeatherMap API\n\nfunction WeatherBar({\n  darkMode,\n  searchQuery\n}) {\n  _s();\n  const [today, setToday] = useState(null);\n  const [hourly, setHourly] = useState([]);\n  const [locationName, setLocationName] = useState('지역 날씨 정보');\n\n  // 주소 -> 좌표 변환 (토큰별 fallback)\n  const getCoordinates = async query => {\n    if (!query) return null;\n    const fetchGeo = async q => {\n      const res = await fetch(`https://api.openweathermap.org/geo/1.0/direct` + `?q=${encodeURIComponent(q)}` + `&limit=1` + `&appid=${API_KEY_1}` + `&lang=kr`);\n      return await res.json();\n    };\n\n    // 1) 원본 쿼리 시도\n    let data = await fetchGeo(query);\n    if (!data || data.length === 0) {\n      // 2) 실패하면 토큰별로 역순으로 시도\n      const parts = query.trim().split(/\\s+/);\n      for (let i = parts.length - 1; i >= 0; i--) {\n        const part = parts[i];\n        if (!part) continue;\n        data = await fetchGeo(part);\n        if (data && data.length > 0) {\n          query = part;\n          break;\n        }\n      }\n    }\n    if (!data || data.length === 0) {\n      return null;\n    }\n    return {\n      lat: data[0].lat,\n      lon: data[0].lon,\n      name: query\n    };\n  };\n\n  // 날씨 정보 요청\n  const fetchWeather = async ({\n    lat,\n    lon\n  }) => {\n    const todayRes = await fetch(`https://api.openweathermap.org/data/2.5/weather` + `?lat=${lat}&lon=${lon}` + `&appid=${API_KEY_1}&units=metric&lang=kr`);\n    const todayData = await todayRes.json();\n    setToday(todayData);\n    const hourlyRes = await fetch(`https://api.openweathermap.org/data/2.5/forecast` + `?lat=${lat}&lon=${lon}` + `&appid=${API_KEY_1}&units=metric&lang=kr`);\n    const hourlyData = await hourlyRes.json();\n    setHourly(hourlyData.list.slice(0, 6));\n  };\n\n  // 검색어 변경 시 실행\n  useEffect(() => {\n    (async () => {\n      if (!searchQuery) return;\n      const coords = await getCoordinates(searchQuery);\n      if (coords) {\n        setLocationName(coords.name);\n        fetchWeather(coords);\n      }\n    })();\n  }, [searchQuery]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `weather-placeBar ${darkMode ? 'dark' : 'light'}`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weather-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"\\uD83C\\uDF24 \", locationName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"today-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"\\uC624\\uB298\\uC758 \\uB0A0\\uC528\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this), today ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"today-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: `https://openweathermap.org/img/wn/${today.weather[0].icon}@2x.png`,\n            alt: \"weather-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"temp\",\n              children: [today.main.temp.toFixed(1), \"\\u2103\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: today.weather[0].description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\uB85C\\uB529 \\uC911...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"hourly-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"\\uC2DC\\uAC04\\uB300\\uBCC4 \\uB0A0\\uC528\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"hourly-scroll\",\n          children: hourly.map((item, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"hourly-card\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: item.dt_txt.split(' ')[1].slice(0, 5)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: `https://openweathermap.org/img/wn/${item.weather[0].icon}.png`,\n              alt: \"icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [item.main.temp.toFixed(1), \"\\u2103\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 17\n            }, this)]\n          }, idx, true, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}\n_s(WeatherBar, \"njqP/a7SGxaqulARC/CDhobbvqU=\");\n_c = WeatherBar;\nexport default WeatherBar;\nvar _c;\n$RefreshReg$(_c, \"WeatherBar\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","API_KEY_1","WeatherBar","darkMode","searchQuery","_s","today","setToday","hourly","setHourly","locationName","setLocationName","getCoordinates","query","fetchGeo","q","res","fetch","encodeURIComponent","json","data","length","parts","trim","split","i","part","lat","lon","name","fetchWeather","todayRes","todayData","hourlyRes","hourlyData","list","slice","coords","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","weather","icon","alt","main","temp","toFixed","description","map","item","idx","dt_txt","_c","$RefreshReg$"],"sources":["/Users/thesueji/Desktop/team2/Team-Pro/building-outline-map/src/components/Weather/WeatherBar.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './WeatherBar.css';\n\nconst API_KEY_1 = '84a4cfe7ca79fc9b0120217a7d5a2028'; // OpenWeatherMap API\n\nfunction WeatherBar({ darkMode, searchQuery }) {\n  const [today, setToday] = useState(null);\n  const [hourly, setHourly] = useState([]);\n  const [locationName, setLocationName] = useState('지역 날씨 정보');\n\n  // 주소 -> 좌표 변환 (토큰별 fallback)\n  const getCoordinates = async (query) => {\n    if (!query) return null;\n    const fetchGeo = async (q) => {\n      const res = await fetch(\n        `https://api.openweathermap.org/geo/1.0/direct` +\n          `?q=${encodeURIComponent(q)}` +\n          `&limit=1` +\n          `&appid=${API_KEY_1}` +\n          `&lang=kr`\n      );\n      return await res.json();\n    };\n\n    // 1) 원본 쿼리 시도\n    let data = await fetchGeo(query);\n    if (!data || data.length === 0) {\n      // 2) 실패하면 토큰별로 역순으로 시도\n      const parts = query.trim().split(/\\s+/);\n      for (let i = parts.length - 1; i >= 0; i--) {\n        const part = parts[i];\n        if (!part) continue;\n        data = await fetchGeo(part);\n        if (data && data.length > 0) {\n          query = part;\n          break;\n        }\n      }\n    }\n\n    if (!data || data.length === 0) {\n      return null;\n    }\n\n    return {\n      lat: data[0].lat,\n      lon: data[0].lon,\n      name: query,\n    };\n  };\n\n  // 날씨 정보 요청\n  const fetchWeather = async ({ lat, lon }) => {\n    const todayRes = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather` +\n        `?lat=${lat}&lon=${lon}` +\n        `&appid=${API_KEY_1}&units=metric&lang=kr`\n    );\n    const todayData = await todayRes.json();\n    setToday(todayData);\n\n    const hourlyRes = await fetch(\n      `https://api.openweathermap.org/data/2.5/forecast` +\n        `?lat=${lat}&lon=${lon}` +\n        `&appid=${API_KEY_1}&units=metric&lang=kr`\n    );\n    const hourlyData = await hourlyRes.json();\n    setHourly(hourlyData.list.slice(0, 6));\n  };\n\n  // 검색어 변경 시 실행\n  useEffect(() => {\n    (async () => {\n      if (!searchQuery) return;\n      const coords = await getCoordinates(searchQuery);\n      if (coords) {\n        setLocationName(coords.name);\n        fetchWeather(coords);\n      }\n    })();\n  }, [searchQuery]);\n\n  return (\n    <div className={`weather-placeBar ${darkMode ? 'dark' : 'light'}`}>\n      <div className=\"weather-card\">\n        <h3>🌤 {locationName}</h3>\n\n        <div className=\"today-section\">\n          <h4>오늘의 날씨</h4>\n          {today ? (\n            <div className=\"today-content\">\n              <img\n                src={`https://openweathermap.org/img/wn/${today.weather[0].icon}@2x.png`}\n                alt=\"weather-icon\"\n              />\n              <div>\n                <p className=\"temp\">{today.main.temp.toFixed(1)}℃</p>\n                <p>{today.weather[0].description}</p>\n              </div>\n            </div>\n          ) : (\n            <p>로딩 중...</p>\n          )}\n        </div>\n\n        <div className=\"hourly-section\">\n          <h4>시간대별 날씨</h4>\n          <div className=\"hourly-scroll\">\n            {hourly.map((item, idx) => (\n              <div className=\"hourly-card\" key={idx}>\n                <p>{item.dt_txt.split(' ')[1].slice(0, 5)}</p>\n                <img\n                  src={`https://openweathermap.org/img/wn/${item.weather[0].icon}.png`}\n                  alt=\"icon\"\n                />\n                <p>{item.main.temp.toFixed(1)}℃</p>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default WeatherBar;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}