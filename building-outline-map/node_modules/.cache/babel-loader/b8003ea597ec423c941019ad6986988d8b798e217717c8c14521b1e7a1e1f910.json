{"ast":null,"code":"// 1. 지역검색 (네이버 Local API) - (프록시 O)\nexport async function naverLocalSearch(query) {\n  const NAVER_CLIENT_ID = process.env.REACT_APP_NAVER_SEARCH_CLIENT_ID;\n  const NAVER_CLIENT_SECRET = process.env.REACT_APP_NAVER_SEARCH_CLIENT_SECRET;\n  const url = `/v1/search/local.json?query=${encodeURIComponent(query)}&display=5`;\n  console.log('[ LocalSearch 요청 URL ]:', url);\n  try {\n    const res = await fetch(url, {\n      headers: {\n        'X-Naver-Client-Id': NAVER_CLIENT_ID,\n        'X-Naver-Client-Secret': NAVER_CLIENT_SECRET\n      }\n    });\n    if (!res.ok) {\n      const errorText = await res.text();\n      console.error('요청 실패:', res.status, errorText);\n      return [];\n    }\n    const data = await res.json();\n    if (!data.items || !Array.isArray(data.items)) {\n      console.error('응답에서 items가 존재하지 않음:', data);\n      return [];\n    }\n    console.log('[ 응답성공 ]', data);\n    return data.items.map(item => ({\n      title: item.title.replace(/<[^>]*>?/g, ''),\n      address: item.address,\n      roadAddress: item.roadAddress,\n      link: item.link,\n      category: item.category\n    }));\n  } catch (err) {\n    console.error('LocalSearch 요청 중 에러 발생:', err);\n    return [];\n  }\n}\n\n// 2. 주소 → 좌표 변환 (Geocode)\nexport async function naverGeocode(address) {\n  const url = `/map-geocode?query=${encodeURIComponent(address)}`;\n  console.log('지오코딩 URL:', url);\n  console.log('요청 헤더:', {\n    'X-Ncp-Apigw-Api-Key-Id': process.env.REACT_APP_NAVER_ID,\n    'X-Ncp-Apigw-Api-Key': process.env.REACT_APP_NAVER_ID_SECRET\n  });\n  try {\n    const res = await fetch(url, {\n      headers: {\n        'X-Ncp-Apigw-Api-Key-Id': process.env.REACT_APP_NAVER_ID,\n        'X-Ncp-Apigw-Api-Key': process.env.REACT_APP_NAVER_ID_SECRET\n      }\n    });\n    if (!res.ok) {\n      const errorText = await res.text();\n      console.error('Geocode API 오류:', res.status, errorText);\n      return null;\n    }\n    const data = await res.json();\n    if (data.addresses && data.addresses.length > 0) {\n      const addr = data.addresses[0];\n      return {\n        lat: parseFloat(addr.y),\n        lng: parseFloat(addr.x)\n      };\n    }\n    return null;\n  } catch (err) {\n    console.error('Geocode 요청 중 에러:', err);\n    return null;\n  }\n}\n\n// 3. 리버스 지오코딩\nexport async function naverReverseGeocode(lat, lng) {\n  const url = `/map-reversegeocode?coords=${lng},${lat}&orders=roadaddr&output=json`;\n  try {\n    const res = await fetch(url, {\n      headers: {\n        'X-Ncp-Apigw-Api-Key-Id': process.env.REACT_APP_NAVER_ID,\n        'X-Ncp-Apigw-Api-Key': process.env.REACT_APP_NAVER_ID_SECRET\n      }\n    });\n    if (!res.ok) {\n      const errorText = await res.text();\n      console.error('Reverse Geocode API 오류:', res.status, errorText);\n      return null;\n    }\n    const data = await res.json();\n    if (data.results && data.results.length > 0) {\n      return data.results[0].region.area1.name;\n    }\n    return null;\n  } catch (err) {\n    console.error('ReverseGeocode 요청 중 에러:', err);\n    return null;\n  }\n}","map":{"version":3,"names":["naverLocalSearch","query","NAVER_CLIENT_ID","process","env","REACT_APP_NAVER_SEARCH_CLIENT_ID","NAVER_CLIENT_SECRET","REACT_APP_NAVER_SEARCH_CLIENT_SECRET","url","encodeURIComponent","console","log","res","fetch","headers","ok","errorText","text","error","status","data","json","items","Array","isArray","map","item","title","replace","address","roadAddress","link","category","err","naverGeocode","REACT_APP_NAVER_ID","REACT_APP_NAVER_ID_SECRET","addresses","length","addr","lat","parseFloat","y","lng","x","naverReverseGeocode","results","region","area1","name"],"sources":["/Users/thesueji/Desktop/team2/Team-Pro/building-outline-map/src/components/utils/naverApi.js"],"sourcesContent":["// 1. 지역검색 (네이버 Local API) - (프록시 O)\nexport async function naverLocalSearch(query) {\n  const NAVER_CLIENT_ID = process.env.REACT_APP_NAVER_SEARCH_CLIENT_ID;\n  const NAVER_CLIENT_SECRET = process.env.REACT_APP_NAVER_SEARCH_CLIENT_SECRET;\n\n  const url = `/v1/search/local.json?query=${encodeURIComponent(query)}&display=5`;\n\n  console.log('[ LocalSearch 요청 URL ]:', url);\n\n  try {\n    const res = await fetch(url, {\n      headers: {\n        'X-Naver-Client-Id': NAVER_CLIENT_ID,\n        'X-Naver-Client-Secret': NAVER_CLIENT_SECRET,\n      },\n    });\n\n    if (!res.ok) {\n      const errorText = await res.text();\n      console.error('요청 실패:', res.status, errorText);\n      return [];\n    }\n\n    const data = await res.json(); \n\n    if (!data.items || !Array.isArray(data.items)) {\n      console.error('응답에서 items가 존재하지 않음:', data);\n      return [];\n    }\n\n    console.log('[ 응답성공 ]', data);\n\n    return data.items.map(item => ({\n      title: item.title.replace(/<[^>]*>?/g, ''),\n      address: item.address,\n      roadAddress: item.roadAddress,\n      link: item.link,\n      category: item.category,\n    }));\n  } catch (err) {\n    console.error('LocalSearch 요청 중 에러 발생:', err);\n    return [];\n  }\n}\n\n\n// 2. 주소 → 좌표 변환 (Geocode)\nexport async function naverGeocode(address) {\n    const url = `/map-geocode?query=${encodeURIComponent(address)}`;\n\n    console.log('지오코딩 URL:', url);\n    console.log('요청 헤더:', {\n        'X-Ncp-Apigw-Api-Key-Id': process.env.REACT_APP_NAVER_ID,\n        'X-Ncp-Apigw-Api-Key': process.env.REACT_APP_NAVER_ID_SECRET,\n    });\n\n    try {\n        const res = await fetch(url, {\n            headers: {\n                'X-Ncp-Apigw-Api-Key-Id': process.env.REACT_APP_NAVER_ID,\n                'X-Ncp-Apigw-Api-Key': process.env.REACT_APP_NAVER_ID_SECRET,\n            },\n        });\n\n        if (!res.ok) {\n            const errorText = await res.text();\n            console.error('Geocode API 오류:', res.status, errorText);\n            return null;\n        }\n\n        const data = await res.json();\n\n        if (data.addresses && data.addresses.length > 0) {\n            const addr = data.addresses[0];\n            return {\n                lat: parseFloat(addr.y),\n                lng: parseFloat(addr.x),\n            };\n        }\n\n        return null;\n    } catch (err) {\n        console.error('Geocode 요청 중 에러:', err);\n        return null;\n    }\n}\n\n// 3. 리버스 지오코딩\nexport async function naverReverseGeocode(lat, lng) {\n    const url = `/map-reversegeocode?coords=${lng},${lat}&orders=roadaddr&output=json`;\n\n    try {\n        const res = await fetch(url, {\n            headers: {\n                'X-Ncp-Apigw-Api-Key-Id': process.env.REACT_APP_NAVER_ID,\n                'X-Ncp-Apigw-Api-Key': process.env.REACT_APP_NAVER_ID_SECRET,\n            },\n        });\n\n        if (!res.ok) {\n            const errorText = await res.text();\n            console.error('Reverse Geocode API 오류:', res.status, errorText);\n            return null;\n        }\n\n        const data = await res.json();\n        if (data.results && data.results.length > 0) {\n            return data.results[0].region.area1.name;\n        }\n\n        return null;\n    } catch (err) {\n        console.error('ReverseGeocode 요청 중 에러:', err);\n        return null;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}