{"ast":null,"code":"var _jsxFileName = \"/Users/thesueji/Desktop/team2/Team-Pro/building-outline-map/src/components/Map/NaverMap.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NAVER_CLIENT_ID = process.env.REACT_APP_NAVER_ID;\nfunction NaverMap({\n  searchResults = [],\n  selectedPlace = null\n}) {\n  _s();\n  const mapRef = useRef(null);\n  const mapInstance = useRef(null);\n  // const markerRef = useRef(null); 이제 단일마커 필요 없음\n  const initMarkerRef = useRef(null);\n  // 검색결과 5개의 장소를 표시 할 복수마커\n  const resultMarkersRef = useRef([]);\n  const [isMapReady, setIsMapReady] = useState(false);\n  const [hasSearchedOnce, setHasSearchedOnce] = useState(false); // ✅ 검색 여부 플래그\n\n  const loadNaverScript = () => {\n    return new Promise((resolve, reject) => {\n      if (window.naver && window.naver.maps) {\n        resolve();\n        return;\n      }\n      const script = document.createElement('script');\n      script.src = `https://oapi.map.naver.com/openapi/v3/maps.js?ncpKeyId=${NAVER_CLIENT_ID}&submodules=geocoder`;\n      script.async = true;\n      script.defer = true;\n      script.onload = () => {\n        if (window.naver && window.naver.maps) {\n          resolve();\n        } else {\n          reject(new Error('네이버 지도 API 로딩 실패'));\n        }\n      };\n      script.onerror = reject;\n      document.head.appendChild(script);\n    });\n  };\n\n  // 지도 로드 및 초기 마커 표시\n  useEffect(() => {\n    loadNaverScript().then(() => {\n      const mapOptions = {\n        center: new window.naver.maps.LatLng(37.5665, 126.978),\n        zoom: 14,\n        zoomControl: true,\n        mapTypeControl: true,\n        mapTypeId: window.naver.maps.MapTypeId.NORMAL,\n        scaleControl: true,\n        logoControl: true,\n        padding: {\n          top: 10,\n          right: 10,\n          bottom: 10,\n          left: 10\n        },\n        mapDataControl: false,\n        zoomControlOptions: {\n          position: window.naver.maps.Position.BOTTOM_LEFT,\n          style: 2\n        }\n      };\n      if (mapRef.current) {\n        mapInstance.current = new window.naver.maps.Map(mapRef.current, mapOptions);\n\n        // ⛔ 검색된 적이 없을 때만 초기 마커 생성\n        if (navigator.geolocation && !hasSearchedOnce) {\n          navigator.geolocation.getCurrentPosition(pos => {\n            const currPos = new window.naver.maps.LatLng(pos.coords.latitude, pos.coords.longitude);\n            mapInstance.current.setCenter(currPos);\n            mapInstance.current.setZoom(13);\n            initMarkerRef.current = new window.naver.maps.Marker({\n              position: currPos,\n              map: mapInstance.current\n            });\n            console.log('1. 초기 위치 마커 생성');\n          });\n        }\n        setIsMapReady(true);\n      }\n    }).catch(err => {\n      console.error('지도 로드 실패:', err);\n    });\n  }, [hasSearchedOnce]);\n\n  // 검색이 한 번이라도 실행되면 초기 마커 제거\n  useEffect(() => {\n    if (hasSearchedOnce && initMarkerRef.current) {\n      initMarkerRef.current.setMap(null);\n      initMarkerRef.current = null;\n      console.log('2. 초기 위치 마커 제거');\n    }\n  }, [hasSearchedOnce]);\n\n  // 검색 결과 마커 복수로 표시\n  useEffect(() => {\n    if (!isMapReady || !window.naver || !mapInstance.current) return;\n\n    // 기존 검색 마커 제거\n    resultMarkersRef.current.forEach(marker => marker.setMap(null));\n    resultMarkersRef.current = [];\n\n    // 검색결과(복수) 마커 표시\n    if (searchResults && searchResults.length > 0) {\n      searchResults.forEach(place => {\n        if (place.lat !== undefined && place.lng !== undefined) {\n          const marker = new window.naver.maps.Marker({\n            position: new window.naver.maps.LatLng(place.lat, place.lng),\n            map: mapInstance.current\n          });\n          resultMarkersRef.current.push(marker);\n        }\n      });\n      // 첫 번째 결과로 지도 중심 이동\n      const first = searchResults[0];\n      if (first && first.lat && first.lng) {\n        mapInstance.current.setCenter(new window.naver.maps.LatLng(first.lat, first.lng));\n        mapInstance.current.setZoom(14);\n      }\n    }\n  }, [searchResults, isMapReady]);\n\n  // 선택된 장소로 지도 확대/이동\n  useEffect(() => {\n    if (!isMapReady || !selectedPlace || !selectedPlace.lat || !selectedPlace.lng) return;\n    mapInstance.current.setCenter(new window.naver.maps.LatLng(selectedPlace.lat, selectedPlace.lng));\n    mapInstance.current.setZoom(16);\n  }, [selectedPlace, isMapReady]);\n\n  // 검색이 한 번이라도 실행된 경우 기록\n  useEffect(() => {\n    if (searchResults && searchResults.length > 0 && !hasSearchedOnce) {\n      setHasSearchedOnce(true);\n    }\n  }, [searchResults, hasSearchedOnce]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-container\",\n    ref: mapRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 10\n  }, this);\n}\n_s(NaverMap, \"NfXwe2VkdTqNCQtHWBiH6FpGOv0=\");\n_c = NaverMap;\nexport default NaverMap;\nvar _c;\n$RefreshReg$(_c, \"NaverMap\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","NAVER_CLIENT_ID","process","env","REACT_APP_NAVER_ID","NaverMap","searchResults","selectedPlace","_s","mapRef","mapInstance","initMarkerRef","resultMarkersRef","isMapReady","setIsMapReady","hasSearchedOnce","setHasSearchedOnce","loadNaverScript","Promise","resolve","reject","window","naver","maps","script","document","createElement","src","async","defer","onload","Error","onerror","head","appendChild","then","mapOptions","center","LatLng","zoom","zoomControl","mapTypeControl","mapTypeId","MapTypeId","NORMAL","scaleControl","logoControl","padding","top","right","bottom","left","mapDataControl","zoomControlOptions","position","Position","BOTTOM_LEFT","style","current","Map","navigator","geolocation","getCurrentPosition","pos","currPos","coords","latitude","longitude","setCenter","setZoom","Marker","map","console","log","catch","err","error","setMap","forEach","marker","length","place","lat","undefined","lng","push","first","className","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/thesueji/Desktop/team2/Team-Pro/building-outline-map/src/components/Map/NaverMap.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n\nconst NAVER_CLIENT_ID = process.env.REACT_APP_NAVER_ID;\n\nfunction NaverMap({ searchResults = [], selectedPlace = null }) {\n  const mapRef = useRef(null);\n  const mapInstance = useRef(null);\n  // const markerRef = useRef(null); 이제 단일마커 필요 없음\n  const initMarkerRef = useRef(null);\n  // 검색결과 5개의 장소를 표시 할 복수마커\n  const resultMarkersRef = useRef([]);\n\n  const [isMapReady, setIsMapReady] = useState(false);\n  const [hasSearchedOnce, setHasSearchedOnce] = useState(false); // ✅ 검색 여부 플래그\n\n  const loadNaverScript = () => {\n    return new Promise((resolve, reject) => {\n      if (window.naver && window.naver.maps) {\n        resolve();\n        return;\n      }\n\n      const script = document.createElement('script');\n      script.src = `https://oapi.map.naver.com/openapi/v3/maps.js?ncpKeyId=${NAVER_CLIENT_ID}&submodules=geocoder`;\n      script.async = true;\n      script.defer = true;\n      script.onload = () => {\n        if (window.naver && window.naver.maps) {\n          resolve();\n        } else {\n          reject(new Error('네이버 지도 API 로딩 실패'));\n        }\n      };\n      script.onerror = reject;\n      document.head.appendChild(script);\n    });\n  };\n\n  // 지도 로드 및 초기 마커 표시\n  useEffect(() => {\n    loadNaverScript().then(() => {\n      const mapOptions = {\n        center: new window.naver.maps.LatLng(37.5665, 126.978),\n        zoom: 14,\n        zoomControl: true,\n        mapTypeControl: true,\n        mapTypeId: window.naver.maps.MapTypeId.NORMAL,\n        scaleControl: true,\n        logoControl: true,\n        padding: { top: 10, right: 10, bottom: 10, left: 10 },\n        mapDataControl: false,\n        zoomControlOptions: {\n          position: window.naver.maps.Position.BOTTOM_LEFT,\n          style: 2,\n        },\n      };\n\n      if (mapRef.current) {\n        mapInstance.current = new window.naver.maps.Map(mapRef.current, mapOptions);\n\n        // ⛔ 검색된 적이 없을 때만 초기 마커 생성\n        if (navigator.geolocation && !hasSearchedOnce) {\n          navigator.geolocation.getCurrentPosition((pos) => {\n            const currPos = new window.naver.maps.LatLng(\n              pos.coords.latitude,\n              pos.coords.longitude\n            );\n            mapInstance.current.setCenter(currPos);\n            mapInstance.current.setZoom(13);\n            initMarkerRef.current = new window.naver.maps.Marker({\n              position: currPos,\n              map: mapInstance.current,\n            });\n            console.log('1. 초기 위치 마커 생성');\n          });\n        }\n\n        setIsMapReady(true);\n      }\n    }).catch((err) => {\n      console.error('지도 로드 실패:', err);\n    });\n  }, [hasSearchedOnce]);\n\n    // 검색이 한 번이라도 실행되면 초기 마커 제거\n  useEffect(() => {\n    if (hasSearchedOnce && initMarkerRef.current) {\n      initMarkerRef.current.setMap(null);\n      initMarkerRef.current = null;\n      console.log('2. 초기 위치 마커 제거');\n    }\n  }, [hasSearchedOnce]);\n\n  // 검색 결과 마커 복수로 표시\n  useEffect(() => {\n    if (!isMapReady || !window.naver || !mapInstance.current) return;\n\n    // 기존 검색 마커 제거\n    resultMarkersRef.current.forEach(marker => marker.setMap(null));\n    resultMarkersRef.current = [];\n\n    // 검색결과(복수) 마커 표시\n    if (searchResults && searchResults.length > 0) {\n      searchResults.forEach(place => {\n        if (place.lat !== undefined && place.lng !== undefined) {\n          const marker = new window.naver.maps.Marker({\n            position: new window.naver.maps.LatLng(place.lat, place.lng),\n            map: mapInstance.current,\n          });\n          resultMarkersRef.current.push(marker);\n        }\n      });\n      // 첫 번째 결과로 지도 중심 이동\n      const first = searchResults[0];\n      if (first && first.lat && first.lng) {\n        mapInstance.current.setCenter(new window.naver.maps.LatLng(first.lat, first.lng));\n        mapInstance.current.setZoom(14);\n      }\n    }\n  }, [searchResults, isMapReady]);\n\n   // 선택된 장소로 지도 확대/이동\n  useEffect(() => {\n    if (!isMapReady || !selectedPlace || !selectedPlace.lat || !selectedPlace.lng) return;\n    mapInstance.current.setCenter(\n      new window.naver.maps.LatLng(selectedPlace.lat, selectedPlace.lng)\n    );\n    mapInstance.current.setZoom(16);\n  }, [selectedPlace, isMapReady]);\n\n  // 검색이 한 번이라도 실행된 경우 기록\n  useEffect(() => {\n    if (searchResults && searchResults.length > 0 && !hasSearchedOnce) {\n      setHasSearchedOnce(true);\n    }\n  }, [searchResults, hasSearchedOnce]);\n\n  return <div className=\"map-container\" ref={mapRef} />;\n}\n\nexport default NaverMap;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}